name: Publish jar as artifact

on: 
    repository_dispatch:
        types: [publish-artifact-event]
jobs:
    download-artifact-job:
        runs-on: ubutu-latest
        env:
            ARTIFACT_NAME: 'ada_qartz-0.1.1-NAPSHOT.jar'
        permissions:
            contents: write
            pull-requests: write

        steps:
            - name: Debug Payload
              run: |
                echo ${{ github.event.client_payload.base_branch }}

            ################################################################
            # 1 - DOwnload source code from default branch in order to retrive Dockerfile, and upload it as docker build context
            ################################################################

            - uses: actions/checkout@v3
              with: 
               ref: ${{ github.event.client_payload.base_branch }}
               fetch-depth: 0
   
            - name: check las hashid
              run: |
                git log -2

            ################################################################
            # 2 - setup java 17 and check that source code is buildable
            ################################################################
            - name: setup java 17
              uses: actions/setup-java@v3
              with:
                distribution: 'temurin'
                java-version: '17'

            - name: Cache Local Meven repository
              uses: actions/cache@v3     
              with:
                path: ~/.m2/repository
                key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
                restore-keys: |
                  ${{ runner.os }}-maven-

            - name: build with maven
             # The "SNAPSHOT" term means that the buid is a snapshot of your code at a given time
             # The --batch-mode flag indicates that the build should be run withoout any user interation
             # Avoid caching versions of your own code) The --update-snapshots flgas tells Maven to check for many updated snapshot of dependences and use those i
             # The package argument tells Maven to package the project into a distributable format, such as a JAR or WAR file.cancel-timeout-minutes: 
              run: |
                mvn clean test package -DskipTest=true --batch-mode --update-snapshots
                echo ls -R target/
                echo ls -la

            ################################################################
            # 4 - publish is at artifact
            ################################################################
            - name: Publish Package
              if: success()
              uses: actions/upload-artifact@v3
              with:
                name: artifactjar
                path: ${{ github.workspace }}/target/${{ env.ARTIFACT_NAME }}